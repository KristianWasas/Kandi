-------------------------------------------------------------------------
Here we have null move pruning added to the version2.0 algorithm, we will be testing null move pruning with reductions NULLMOVEDEPTHREDUCTION=1 and NULLMOVEDEPTHREDUCTION=2
version4.0 has NULLMOVEDEPTHREDUCTION=1
-------------------------------------------------------------------------

int minimax(bitBoard &board, uint8_t depth, bool whiteTurn, uint8_t maxDepth, int alpha, int beta){
    
    if(depth == maxDepth){                              //Once weve reached the desired depth, we just return the evaluation
        return evaluation(board);
    }

    vector<bitBoard> moves;                             //Initialize needed variables
    int eval;
    moves.reserve(50);

    if(whiteTurn){                                      //White ie. maximizing player

        //Nullmove pruning
        //Try a null move if ones desired, and aslong as we are not in Check
        if((maxDepth > depth + 1 + NMDEPTHREDUCTION) && (whiteKingCheck(board) == 0)){                           
            int32_t nullMoveValue = minimaxNoNullMove(board, depth + 1 + NMDEPTHREDUCTION, false, maxDepth, alpha, beta);   //Here minimaxNoNullMove is jsut minimax with no null move
            if(nullMoveValue >= beta){                  //If the null move value fails high, return value
                return nullMoveValue;
            }                                                     
        }

        generateWhiteMoves(board, moves);               //Generate all possible moves for white, and store them in moves
        if(moves.empty()){                              //If no moves possible, check is the white king in check and return NEGINF if yes or 0 if in stalemate
            return whiteKingCheck(board);
        }
        eval = NEGINF;                                  
        for(bitBoard &i : moves){                       //Loop over all possible moves, and recursively call minimax, if found move is better than existing one, replace
            int moveEval = minimax(i, depth + 1, false, maxDepth, alpha, beta);
            eval = max(eval, moveEval);     
            if(beta <= eval){                           //If there exists a beta (beta being the best option for the minimizer in a parent node so far)
                break;                                  //That is smaller than the current value of the node we are in, we know that the minimizing player
            }                                           //Would never choose this path, since a better one is available, and we can terminate, the search 
            alpha = max(alpha, eval);                   //We update alpha to be the best value
        }
        return eval;                                    //We return the value of the best move/child node
    }
    else{                                               //Minimizing player, same process as for white, but we minimize and return INF if in checkmate

        //Nullmove pruning
        //Try a null move if ones desired, and aslong as we are not in Check
        if((maxDepth > depth + 1 + NMDEPTHREDUCTION) && (blackKingCheck(board) == 0)){                           
            int32_t nullMoveValue = minimaxNoNullMove(board, depth + 1 + NMDEPTHREDUCTION, true, maxDepth, alpha, beta);
            if(nullMoveValue <= alpha){                  //If the null move value fails low, return value
                return nullMoveValue;
            }         
        }

        generateBlackMoves(board, moves);
        if(moves.empty()){
            return blackKingCheck(board);
        }
        eval = INF;                                     //Again we initialize, but as INF, since black tries to minimize the score
        for(bitBoard &i : moves){
            int moveEval = minimax(i, depth + 1, true, maxDepth, alpha, beta);
            eval = min(eval, moveEval);                 //Same process as for the maximizer, but mirrored and using alpha (best option for a maximizing parent node)
            if(alpha >= eval){
                break;
            }
            beta = min(beta, eval);
        }
        return eval;
    }
}