-----------------------------------------------------------------
Version 5.0 is version 4.1 with a quiescence search added ontop, ie after reaching the max depth
we dont call eval, but perform a norrower search, in this case all captures, and 
we keep capturing untill the result is either a fail high on static eval or 
we have no more captures and return the eval, NOTE data-1.text has data of the search with -1 depth
------------------------------------------------------------------

int qSearch(bitBoard &board, bool whiteTurn, int alpha, int beta){

    //Note that qSearch should be self collapsing, ie. it will stop on its own when it finds a quiet position 

    int standingEval = evaluation(board);                   //The static evaluation of current position

    if(whiteTurn){                                          //We assume that there exists a move that keeps the current standing eval
        if(standingEval >= beta){                           //ie. a move that doesnt weaken the position                                              
            return standingEval;                            //there exists a move that is atleast equal to standing eval, and return the standingEval if fail high
        }
        alpha = max(standingEval, alpha);                   //If we dont fail high, we update alpha
    }else{                                                  
        if(standingEval <= alpha){                         
            return standingEval;
        }
        beta = min(standingEval, beta);
    }

    vector<bitBoard> moves;                             //Initialize needed variables
    int eval = standingEval;                            //Here the minimum eval is the standing eval, since now we only search captures, we assume there is a move that preserves the eval
    moves.reserve(10);

    if(whiteTurn){                                      //White ie. maximizing player
        generateWhiteNonQuietMoves(board, moves);       //Generate all possible moves for white that could impact the eval, ie. "non-quiet", and store them in moves                            
        for(bitBoard &i : moves){                       //Loop over all non-quiet moves, and recursively call qsearch, if found move is better than existing one, replace
            int moveEval = qSearch(i, depth + 1, false, alpha, beta, nullTree);
            eval = max(eval, moveEval);     
            if(beta <= eval){                           //If there exists a beta (beta being the best option for the minimizer in a parent node so far)
                return eval;                            //That is smaller than the current value of the node we are in, we know that the minimizing player
            }                                           //Would never choose this path, since a better one is available, and we can terminate
            alpha = max(alpha, eval);                   //We update alpha to be the best value
        }
    }
    else{                                               //Minimizing player, same process as for white, but we minimize and return INF if in checkmate
        generateBlackNonQuietMoves(board, moves);                      
        for(bitBoard &i : moves){
            int moveEval = qSearch(i, depth + 1, true, alpha, beta, nullTree);
            eval = min(eval, moveEval);                 //Same process as for the maximizer, but mirrored and using alpha (best option for a maximizing parent node)
            if(alpha >= eval){
                return eval;
            }
            beta = min(beta, eval);
        }
    }
        
    return eval;                                    //We return the value of the best move/child node, OR the standingEval if not capturing is better or no captures available
}

int minimax(bitBoard &board, uint8_t depth, bool whiteTurn, uint8_t maxDepth, int alpha, int beta){
    
    if(depth == maxDepth){                              //Once weve reached the desired depth, we call qSearch
        return qSearch(bitBoard &board, whiteTurn, alpha, beta);
    }

    vector<bitBoard> moves;                             //Initialize needed variables
    int eval;
    moves.reserve(50);

    if(whiteTurn){                                      //White ie. maximizing player

        //Nullmove pruning
        //Try a null move if ones desired, and aslong as we are not in Check
        if((maxDepth > depth + 1 + NMDEPTHREDUCTION) && (whiteKingCheck(board) == 0)){                           
            int32_t nullMoveValue = minimaxNoNullMove(board, depth + 1 + NMDEPTHREDUCTION, false, maxDepth, alpha, beta);   //Here minimaxNoNullMove is jsut minimax with no null move
            if(nullMoveValue >= beta){                  //If the null move value fails high, return value
                return nullMoveValue;
            }                                                     
        }

        generateWhiteMoves(board, moves);               //Generate all possible moves for white, and store them in moves
        if(moves.empty()){                              //If no moves possible, check is the white king in check and return NEGINF if yes or 0 if in stalemate
            return whiteKingCheck(board);
        }
        eval = NEGINF;                                  
        for(bitBoard &i : moves){                       //Loop over all possible moves, and recursively call minimax, if found move is better than existing one, replace
            int moveEval = minimax(i, depth + 1, false, maxDepth, alpha, beta);
            eval = max(eval, moveEval);     
            if(beta <= eval){                           //If there exists a beta (beta being the best option for the minimizer in a parent node so far)
                break;                                  //That is smaller than the current value of the node we are in, we know that the minimizing player
            }                                           //Would never choose this path, since a better one is available, and we can terminate, the search 
            alpha = max(alpha, eval);                   //We update alpha to be the best value
        }
        return eval;                                    //We return the value of the best move/child node
    }
    else{                                               //Minimizing player, same process as for white, but we minimize and return INF if in checkmate

        //Nullmove pruning
        //Try a null move if ones desired, and aslong as we are not in Check
        if((maxDepth > depth + 1 + NMDEPTHREDUCTION) && (blackKingCheck(board) == 0)){                           
            int32_t nullMoveValue = minimaxNoNullMove(board, depth + 1 + NMDEPTHREDUCTION, true, maxDepth, alpha, beta);
            if(nullMoveValue <= alpha){                  //If the null move value fails low, return value
                return nullMoveValue;
            }         
        }

        generateBlackMoves(board, moves);
        if(moves.empty()){
            return blackKingCheck(board);
        }
        eval = INF;                                     //Again we initialize, but as INF, since black tries to minimize the score
        for(bitBoard &i : moves){
            int moveEval = minimax(i, depth + 1, true, maxDepth, alpha, beta);
            eval = min(eval, moveEval);                 //Same process as for the maximizer, but mirrored and using alpha (best option for a maximizing parent node)
            if(alpha >= eval){
                break;
            }
            beta = min(beta, eval);
        }
        return eval;
    }
}